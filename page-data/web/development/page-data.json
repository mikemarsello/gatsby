{"componentChunkName":"component---src-templates-web-template-js","path":"/web/development","webpackCompilationHash":"9cfafdde4b2fa13a999c","result":{"data":{"markdownRemark":{"html":"<!-- ### Team Overview\nI work on a team with three other developers. One teammate focuses on the devops side of things while the other two teammates focus more on back-end development. I am responsible for most of the theming and front-end concerns. -->\n<h3>Git Workflow</h3>\n<p>We use version control for all of our sites/projects. We typically use a \"develop\" branch which feature branches then get merged into. When it is time to cut a release tag the develop branch gets merged into master and the tag is created. Sometimees we will create an epic branch for larger user stories that will require many feature branches.</p>\n<p>Developers create pull requests for any proposed code change. Pull requests are reviewed and approved by two teammates before being considered complete and merged into the develop branch. By creating a pull request a developer vouches that their code has been run against our suite of unit tests and that it has been verified to meet Drupal coding standards by analyzing it with phpcs.</p>\n<p>When I first started working at UT we used BitBucket for most of our repositories. This was very nice because of the extensive integration between BitBucket and Jira, our issue tracker of choice. As an organization we have since moved to GitHub Enterprise. This does not offer the same level of integration with Jira but it is still effective.</p>\n<h3>Hosting</h3>\n<p>When I first started at UT most sites were self-hosted on UT infrastructure. The complication this presented was handing off a server to non-technical users. There were frequent problems and users often didn't always follow best practices such as using version control, backing up databases and utilizing multiple environements to stage changes.</p>\n<p>We have since moved to <a href=\"https://pantheon.io/\">Pantheon</a> for most of our hosting needs. This presents many benefits for non-technical users as they can use our custom upstream to get a site where they only have access to the Pantheon UI and the Drupal UI with a limited set of permissions. This way non-technical users don't have to deal with code at all - only configuration and content. More tech-savvy developers are of course free to use our custom upstream in the more conventional sense where they are responsible for upgrading their code base with our new releases, managing any custom/contrib modules or themes on their sites, and managing the state of their exported features.</p>\n<h3>Jira</h3>\n<p>We use Jira for issue tracking. We flirted with using GitHub's issue tracker but found it be less fully featured than Jira. We typically create a number of user stories for a two-week sprint. A number of sub-tasks are then added to each story. Typically, a pull request is mapped to a Jira issue and a concious effort is made to keep high-level discussion or the rationale behind decisions in the Jira comments. We have found that information put in the pull request comments is harder to locate after a pull request has been merged than if it is in the original issue.</p>\n<h3>Foundation</h3>\n<p>We used Zurb's Foundation 5 for the utexas.edu core site and for the Drupal 7 distribution. We had a custom theme that pulled in the Foundation library using Bower. We did not need the entire library so we only compiled a subset of Foundation's CSS and JS.</p>\n<h3>Bootstrap</h3>\n<p>After consulting with our distribution's users we found that there was a community preference for Bootstrap so we decided to make the switch from Foundation to Bootstrap when porting our distribution to Drupal 8. There were some other reasons for this decision too. Bootstrap has a lot of mindshare so it stands to reason that there are more development resources available online. Also, there has historically been a richer ecosystem of Drupal contrib modules available so it's safe to assume that will also be the case with Drupal 8.</p>\n<h3>Gulp</h3>\n<p>We previously used Grunt as our front-end taskrunner in ur Drupal 7 distribution. We used it compile and autoprefix our SCSS files and concatenate and uglify our JavaScript files. While Grunt was an effective tool we found that Gulp was easier to configure. We are now using Gulp in our Drupal 8 distribution. We make use of NPM scripts for some tasks. An example of this is adding a script to use a local gulp package instead of the global one.</p>\n<h3>Lando</h3>\n<p>Different members of our team preferred different local development environments. Some used MAMP while others swore by Dev Desktop. We sometimes ran into problems with the differences between these environments and the environements our sites were actually served from. We tried using DrupalVM but found it a bit unweildy. We also tried Kalabox which was resource intensive and a bit buggy. Along came <a href=\"https://docs.devwithlando.io/\">Lando</a> and it really solved our problems. The only issue we had was its poor performance on OSX. This is a known problem and will hopefully be resolved soon. In the meantime Lando runs well enough on Macs and great on Linux.</p>\n<!-- ### Accessibility\nMost of the major sites we work on are set up to receive WorldSpace scans. A lot of people take their WorldSpace scores very seriously even though it has some limitations. It only tests the desktop version of a site so the score may not accurately reflect a site's mobile accessibility which is unfortunate seeing as more and more web traffic is on mobile these days.\n\nOur team is always concious of common concerns like color contrast and using aria attributes where appropriate. We also verify -->","frontmatter":{"date":"2018-8-30","path":"/web/development","title":"development methodology","author":"Mike Marsello"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}