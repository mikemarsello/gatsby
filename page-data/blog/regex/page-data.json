{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/regex","webpackCompilationHash":"a3aa99939f0fbabfb92c","result":{"data":{"markdownRemark":{"html":"<p><a href=\"https://www.debuggex.com/cheatsheet/regex/javascript\">https://www.debuggex.com/cheatsheet/regex/javascript</a></p>\n<p><a href=\"https://scrimba.com/g/gregularexpressions\">https://scrimba.com/g/gregularexpressions</a></p>\n<table>\n<thead>\n<tr>\n<th>Regex</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.</td>\n<td>wildcard and can be any one character</td>\n</tr>\n<tr>\n<td>^</td>\n<td>in character set is negation</td>\n</tr>\n<tr>\n<td>.</td>\n<td>wildcard and can be any one character</td>\n</tr>\n<tr>\n<td>^</td>\n<td>in character set [] is negation (do not return these characters)</td>\n</tr>\n<tr>\n<td>^</td>\n<td>in expression // for characters at the beginning</td>\n</tr>\n<tr>\n<td>$</td>\n<td>for characters at the end of a string</td>\n</tr>\n<tr>\n<td>+</td>\n<td>to test if character occurs more than once in a row</td>\n</tr>\n<tr>\n<td>*</td>\n<td>to test for zero or more of the specified character</td>\n</tr>\n<tr>\n<td>?</td>\n<td>for a lazy match (defaults to greedy match\")</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>matches character set of all number, letters and the underscore</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>matches everything except letters, numbers and underscores</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>matches only digits</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>matches all non-digits</td>\n</tr>\n<tr>\n<td>{2,5}</td>\n<td>min/max - 2 is the minimum # of matches and 5 is the maxiumum number of matches ({2,} is two to infinity)</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>returns whitespace characters (space, carriage return etc)</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>matches all non-whitespace characters</td>\n</tr>\n<tr>\n<td>/expression/i</td>\n<td>add \"i\" after ending slash to make it not case-sensitive</td>\n</tr>\n<tr>\n<td>/expression/g</td>\n<td>add \"g\" after the ending slash to return all matching elements</td>\n</tr>\n<tr>\n<td>.test()</td>\n<td>if regex is true/false and returns boolean</td>\n</tr>\n<tr>\n<td>.match()</td>\n<td>returns the string you searched for (only the first matching element(s) unless you use the g flag)</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> myString <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/Hello/</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string to search for</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> myRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>myString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns true</span>\n\n<span class=\"token keyword\">let</span> myString <span class=\"token operator\">=</span> <span class=\"token string\">\"chicken, turkey, duck, goose\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/dog|cat/</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// | = or</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> myRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>myString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">// returns true</span>\n\n<span class=\"token keyword\">let</span> myString <span class=\"token operator\">=</span> <span class=\"token string\">\"chicken, turkey, duck, goose\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/dog/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> myRegex<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>myString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns \"dog\"</span>\n\n<span class=\"token keyword\">let</span> exampleStr <span class=\"token operator\">=</span> <span class=\"token string\">\"Let's have fun with regular expressions!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> unRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/.un/</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// wildcard for first character</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> unRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>exampleStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns \"fun\"</span>\n\n<span class=\"token keyword\">let</span> quoteSample <span class=\"token operator\">=</span> <span class=\"token string\">\"Beware of bugs in the above code; I have only proved it correct, not tried it.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> vowelRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/[aeiou]/ig</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// tests for all vowels</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> quoteSample<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>vowelRegex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns all the vowels from quoteSample</span>\n\n<span class=\"token keyword\">let</span> quoteSample <span class=\"token operator\">=</span> <span class=\"token string\">\"The quick brown fox jumps over the lazy dog.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> alphabetRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/[a-z]/ig</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// tests for all letters</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> quoteSample<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>alphabetRegex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// return the whole string as an array of characters</span>\n\n<span class=\"token keyword\">let</span> quoteSample <span class=\"token operator\">=</span> <span class=\"token string\">\"Blueberry 3.141592653s are delicious.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/[2-6h-s]/ig</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> quoteSample<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>myRegex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns all numbers from 2 to 6 and all letters from h to s</span>\n\n<span class=\"token keyword\">let</span> quoteSample <span class=\"token operator\">=</span> <span class=\"token string\">\"3 blind mice.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/[^0-9aeiou]/ig</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// does not return numbers or vowels</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> quoteSample<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>myRegex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns spaces and consonants</span>\n\n<span class=\"token keyword\">let</span> difficultSpelling <span class=\"token operator\">=</span> <span class=\"token string\">\"Mississippi\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/s+/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> difficultSpelling<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>myRegex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns ss ss</span>\n\n<span class=\"token keyword\">let</span> soccerWord <span class=\"token operator\">=</span> <span class=\"token string\">\"gooooooooal!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> gPhrase <span class=\"token operator\">=</span> <span class=\"token string\">\"gut feeling\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> oPhrase <span class=\"token operator\">=</span> <span class=\"token string\">\"over the moon\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> goRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/go*/</span><span class=\"token punctuation\">;</span>\nsoccerWord<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>goRegex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns [\"goooooooo\"]</span>\ngPhrase<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>goRegex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns [\"g\"]</span>\noPhrase<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>goRegex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns null</span>\n<span class=\"token keyword\">let</span> chewieQuote <span class=\"token operator\">=</span> <span class=\"token string\">\"Aaaaaaaaaaaaaaaarrrgh!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> chewieRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/Aa*/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> chewieQuote<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>chewieRegex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns Aaaaaaaaaaaaaaaa</span>\n\n<span class=\"token comment\">// greedy match</span>\n<span class=\"token keyword\">let</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"titanic\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/t[a-z]*i/</span><span class=\"token punctuation\">;</span>\nstring<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns titani</span>\n\n<span class=\"token comment\">// lazy match</span>\n<span class=\"token keyword\">let</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"titanic\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/t[a-z]*?i/</span><span class=\"token punctuation\">;</span>\nstring<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns ti</span>\n\n<span class=\"token keyword\">let</span> rickyAndCal <span class=\"token operator\">=</span> <span class=\"token string\">\"Cal and Ricky both like racing.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> calRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/^Cal/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> calRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>rickyAndCal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns true because string starts with Cal</span>\n\n<span class=\"token keyword\">let</span> caboose <span class=\"token operator\">=</span> <span class=\"token string\">\"The last car on a train is the caboose\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> lastRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/caboose$/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> lastRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>caboose<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns true because string ends with caboose</span>\n\n<span class=\"token keyword\">let</span> quoteSample <span class=\"token operator\">=</span> <span class=\"token string\">\"The five boxing wizards jump quickly.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> alphabetRegexV2 <span class=\"token operator\">=</span> <span class=\"token regex\">/\\w/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> quoteSample<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>alphabetRegexV2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 31 because there are 31 letters in the string excluding the spaces and punctuation</span>\n\n<span class=\"token keyword\">let</span> quoteSample <span class=\"token operator\">=</span> <span class=\"token string\">\"The five boxing wizards jump quickly.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> nonAlphabetRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/\\W/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> quoteSample<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>nonAlphabetRegex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 6 because there are 5 spaces and a period</span>\n\n<span class=\"token keyword\">let</span> numString <span class=\"token operator\">=</span> <span class=\"token string\">\"Your sandwich will be $5.00\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> numRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/\\d/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> numString<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>numRegex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 3 because there are three digits</span>\n\n<span class=\"token keyword\">let</span> numString <span class=\"token operator\">=</span> <span class=\"token string\">\"Your sandwich will be $5.00\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> noNumRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/\\D/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> numString<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>noNumRegex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 24 because it ignores the 5, 0 and 0</span>\n\n<span class=\"token comment\">/*\n1) If there are numbers, they must be at the end.\n2) Letters can be lowercase and uppercase.\n3) At least two characters long. Two-letter names can't have numbers.\n*/</span>\n<span class=\"token keyword\">let</span> username <span class=\"token operator\">=</span> <span class=\"token string\">\"JackOfAllTrades\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> userCheck <span class=\"token operator\">=</span> <span class=\"token regex\">/^[A-Za-z]{2,}\\d*$/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> userCheck<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> sample <span class=\"token operator\">=</span> <span class=\"token string\">\"Whitespace is important in separating words\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> countWhiteSpace <span class=\"token operator\">=</span> <span class=\"token regex\">/\\s/g</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> sample<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>countWhiteSpace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns array of the spaces</span>\n\n<span class=\"token keyword\">let</span> sample <span class=\"token operator\">=</span> <span class=\"token string\">\"Whitespace is important in separating words\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> countWhiteSpace <span class=\"token operator\">=</span> <span class=\"token regex\">/\\S/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> sample<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>countWhiteSpace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns all the letters with no spaces</span>\n\n<span class=\"token keyword\">let</span> ohStr <span class=\"token operator\">=</span> <span class=\"token string\">\"Ohhh no\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> ohRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/Oh{3,6} no/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> ohRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>ohStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns whole string</span>\n<span class=\"token keyword\">let</span> haStr <span class=\"token operator\">=</span> <span class=\"token string\">\"Hazzzzah\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> haRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/z{4,}/</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// tests for 4 or more z's</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> haRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>haStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> timStr <span class=\"token operator\">=</span> <span class=\"token string\">\"Timmmmber\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> timRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/Tim{4}ber/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> timRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>timStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns true because there are exactly 4 m's</span>\n\n<span class=\"token keyword\">let</span> favWord <span class=\"token operator\">=</span> <span class=\"token string\">\"favorite\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> favRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/favou?rite/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> favRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>favWord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns true for favorite or favourite</span>\n\n<span class=\"token comment\">// look ahead</span>\n<span class=\"token keyword\">let</span> quit <span class=\"token operator\">=</span> <span class=\"token string\">\"qu\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> noquit <span class=\"token operator\">=</span> <span class=\"token string\">\"qt\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> quRegex<span class=\"token operator\">=</span> <span class=\"token regex\">/q(?=u)/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> qRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/q(?!u)/</span><span class=\"token punctuation\">;</span>\nquit<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>quRegex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns [\"q\"] as there is a following u</span>\nnoquit<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>qRegex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns [\"q\"] as there is no following u</span>\n\n<span class=\"token keyword\">let</span> sampleWord <span class=\"token operator\">=</span> <span class=\"token string\">\"astronaut\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> pwRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/(?=\\w{5})(?=\\D*\\d{2})/</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// tests for at least 5 characters and at least two or more consecutive digits</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> pwRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>sampleWord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// capture groups to find repeated patterns</span>\n<span class=\"token keyword\">let</span> repeatStr <span class=\"token operator\">=</span> <span class=\"token string\">\"regex regex\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> repeatRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/(\\w+)\\s\\1/</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// looks for any number of letters followed by a space and the original string repeated</span>\nrepeatRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>repeatStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns true</span>\nrepeatStr<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>repeatRegex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns [\"regex regex\", \"regex\"]</span>\n<span class=\"token keyword\">let</span> repeatNum <span class=\"token operator\">=</span> <span class=\"token string\">\"42 42 42\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> reRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/^(\\d+)\\s\\1\\s\\1$/</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// looks for a number that is repeated only three times</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> reRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>repeatNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// replace method</span>\n<span class=\"token keyword\">let</span> wrongText <span class=\"token operator\">=</span> <span class=\"token string\">\"The sky is silver.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> silverRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/silver/</span><span class=\"token punctuation\">;</span>\nwrongText<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>silverRegex<span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns \"The sky is blue.\"</span>\n<span class=\"token string\">\"Code Camp\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/(\\w+)\\s(\\w+)/</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'$2 $1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns \"Camp Code\"</span>\n<span class=\"token keyword\">let</span> huhText <span class=\"token operator\">=</span> <span class=\"token string\">\"This sandwich is good.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> fixRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/good/</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// pattern to match</span>\n<span class=\"token keyword\">let</span> replaceText <span class=\"token operator\">=</span> <span class=\"token string\">\"okey-dokey\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string to replace it with</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> huhText<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>fixRegex<span class=\"token punctuation\">,</span> replaceText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// returns This sandwich is okey-dokey</span>\n\n<span class=\"token comment\">// remove whitespace from beginning and end of string</span>\n<span class=\"token keyword\">let</span> hello <span class=\"token operator\">=</span> <span class=\"token string\">\"   Hello, World!  \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> wsRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/^\\s+|\\s+$/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> hello<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>wsRegex<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns \"Hello, world!\"</span></code></pre>\n      </div>\n<h2>RegEx Challenges</h2>\n<p><a href=\"http://play.inginf.units.it/#/\">http://play.inginf.units.it/#/</a></p>","frontmatter":{"date":"2018-8-30","path":"/blog/regex","title":"regular expressions","author":"Mike Marsello","template":"blog","desc":"regex"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}